package pt.utl.ist.cm.neartweetclient.core;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import android.util.Log;

import pt.utl.ist.cm.neartweetEntities.pdu.PDU;
import pt.utl.ist.cm.neartweetEntities.pdu.RegisterPDU;
import pt.utl.ist.cm.neartweetclient.utils.UiMessages;
import pt.utl.ist.cmov.wifidirect.sockets.SimWifiP2pSocket;

public class Peer {

	private String deviceName;
	private String deviceAddress;
	private int devicePort;
	private SimWifiP2pSocket socket;
	private ObjectOutputStream out;
	private ObjectInputStream in;

	public Peer(SimWifiP2pSocket socket) throws Exception {
		try {
			this.socket = socket;
			this.out = new ObjectOutputStream(socket.getOutputStream());
			this.in  = new ObjectInputStream(socket.getInputStream());
		} catch (Exception e) {
			Log.i("CHAT-PEER", "Error creating peer by socket");
			e.printStackTrace();
			throw new Exception("Error constructing peer connection");
		}
	}

	public Peer(String deviceName, String deviceAddress, int devicePort) {
		this.deviceName = deviceAddress;
		this.deviceAddress = deviceAddress;
		this.devicePort = devicePort;
	}
	
	public void connect() throws Exception {
		try {
			this.socket = new SimWifiP2pSocket(deviceAddress, devicePort);
			this.out = new ObjectOutputStream(socket.getOutputStream());
			this.in  = new ObjectInputStream(socket.getInputStream());
		} catch (Exception e) {
			Log.i("CHAT-PEER", "Error connecting");
			e.printStackTrace();
			throw new Exception("Error connecting");
		}
	}
	
	public boolean isClosed() {
		return this.socket!=null || this.out!=null || this.in !=null || this.socket.isClosed();
	}
	
	public boolean sendConnectPDU(String id) {
		return sendPDU(new RegisterPDU(id, deviceName));
	}
	
	public boolean sendPDU(PDU pdu) {
		Log.i(UiMessages.NEARTWEET_TAG, "sending pdu " + pdu);
		try {
			out.writeObject(pdu);
			out.flush();
			return true;
		} catch (IOException e) {
			Log.e("CHAT-PEER-SEND-PDU", "Error sending message [ " + pdu + " ]" + "\n");
			e.printStackTrace();
			return false;
		}
	}
	
	public PDU receivePDU() {
		while (true) {
			Object receivedObj = null;
			try {
				receivedObj = in.readObject();
				if (receivedObj != null && receivedObj instanceof PDU) {
					return (PDU) receivedObj;
				}
			} catch (Exception e) {
				Log.e("CHAT-PEER-SEND-PDU", "Error receiving message " + "\n");
				return null;
			}
		}
	}
	
	public void closeConnection () {
		if(!isClosed()) {
			try {
				Log.i("CHAT-PEER-DISCONNECT", "closing socket");
				socket.close();
				Log.i("CHAT-PEER-DISCONNECT", "socket closed");
			} catch (Exception e) {
				Log.d("Error closing socket connection:", e.getMessage());
				e.printStackTrace();
			}
		}
	}

	/********************************************************************
	 *							GETS & SETS								*
	 ********************************************************************/

	public String getDeviceName() {
		return deviceName;
	}

	public void setDeviceName(String deviceName) {
		this.deviceName = deviceName;
	}

	public String getDeviceAddress() {
		return deviceAddress;
	}

	public void setDeviceAddress(String deviceAddress) {
		this.deviceAddress = deviceAddress;
	}

	public int getDevicePort() {
		return devicePort;
	}

	public void setDevicePort(int devicePort) {
		this.devicePort = devicePort;
	}

	public SimWifiP2pSocket getSocket() {
		return socket;
	}

	public void setSocket(SimWifiP2pSocket socket) {
		this.socket = socket;
	}

	public ObjectOutputStream getOut() {
		return out;
	}

	public void setOut(ObjectOutputStream out) {
		this.out = out;
	}

	public ObjectInputStream getIn() {
		return in;
	}

	public void setIn(ObjectInputStream in) {
		this.in = in;
	}
	
	@Override
	public String toString() {
		
	}
}
