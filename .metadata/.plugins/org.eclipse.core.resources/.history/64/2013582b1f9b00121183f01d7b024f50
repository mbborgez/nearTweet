package pt.utl.ist.cm.neartweetclient.ui;

import pt.utl.ist.cm.neartweetEntities.pdu.GenericMessagePDU;
import pt.utl.ist.cm.neartweetclient.R;
import pt.utl.ist.cm.neartweetclient.connectionTasks.ConnectionStatus;
import pt.utl.ist.cm.neartweetclient.connectionTasks.Constants;
import pt.utl.ist.cm.neartweetclient.exceptions.NearTweetException;
import pt.utl.ist.cm.neartweetclient.services.ConnectToServerService;
import pt.utl.ist.cm.neartweetclient.services.RegisterUserService;
import pt.utl.ist.cm.neartweetclient.utils.UiMessages;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class LoginActivity extends Activity {

	private Button loginButton;
	private EditText userNameText;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);

		// referencing objects
		loginButton = (Button) findViewById(R.id.loginButton);
		userNameText = (EditText) findViewById(R.id.usernameText);

		//arming listeners
		userNameText.addTextChangedListener(textWatcherGuard());
		loginButton.setOnClickListener(loginRequestCallback());
	}

	/**
	 * registerUser - it is responsible to delegate the Registration to the 
	 * Service Layer
	 * @param username - the name which this user will identify future interactions with
	 * the remaining entities on the network
	 */
	private void registerUser(String username) {
		new AsyncTask<Void, Void, Void>(){
			@Override
			protected Void doInBackground(Void... params) {
				ConnectToServerService connectService = new ConnectToServerService(Constants.SERVER_ADDRESS, Constants.SERVER_PORT);
				connectService.execute();
				return null;
			}
			@Override
			protected Void onPostExecute(Void result){
				
			}
		};
		// Register for the connection status action
		IntentFilter receivedPDUFilter = new IntentFilter(Constants.GENERIC_MESSAGE_PDU_RECEIVED);
		LocalBroadcastManager.getInstance(getApplicationContext()).registerReceiver(loginStatusReceiver, receivedPDUFilter);
		
		IntentFilter connectionStatusFilter = new IntentFilter(Constants.GENERIC_MESSAGE_PDU_RECEIVED);
		LocalBroadcastManager.getInstance(getApplicationContext()).registerReceiver(connectionStatusReceiver, connectionStatusFilter);
		
		//invoke a service that regists the user
		RegisterUserService registerUserService = new RegisterUserService(username, getApplicationContext());
		try {
			Log.i(this.getClass().toString(), "Before register service");
			registerUserService.execute();
			Log.i(this.getClass().toString(), "After register service");
		} catch(NearTweetException e) {
			Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_LONG).show();
			loginButton.setEnabled(false);
		}
	}

	/**
	 * Actually this transition should be synchronous and wait by RegisterUserService Response
	 * If the network already has one user the name selected we should present an error to the user   
	 * it will be able to start a new activity
	 * FIXME! - AQ
	 */
	public void nextScreen() {
		startActivity(new Intent(this, TweetsStreamActivity.class));
	}

	/**
	 * shows an alert message with invalid Login
	 */
	public void invalidLogin() {
		Toast.makeText(this, UiMessages.ERROR_MESSAGE,Toast.LENGTH_SHORT).show();
	}

	private TextWatcher textWatcherGuard() {
		loginButton.setEnabled(false);
		return new TextWatcher() {
			@Override
			public void afterTextChanged(Editable arg0) {/**empty**/}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
				loginButton.setEnabled(s.length() > 0);
			}

			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				loginButton.setEnabled(s.length() > 0);
			}
		};
	}

	private OnClickListener loginRequestCallback() {
		return new OnClickListener() {
			@Override
			public void onClick(View v) {
				loginButton.setEnabled(false);
				String userName = userNameText.getText().toString();
				Log.i(this.getClass().toString(), "Before click");
				registerUser(userName);
				Log.i(this.getClass().toString(), "After click");
			}
		};
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		return true;
	}


	@Override
	protected void onDestroy() {
		super.onDestroy();
		unregisterUser();
	}

	public void unregisterUser() {
		//TODO send a unregister request to the server
		//TODO close the socket
		ConnectionStatus.getInstance().disconnect();
		//TODO kill the threads
		unregisterReceiver(connectionStatusReceiver);
		unregisterReceiver(loginStatusReceiver);
	}

	private BroadcastReceiver loginStatusReceiver = new BroadcastReceiver(){
		@Override
		public void onReceive(Context context, Intent intent) {
			if (Constants.GENERIC_MESSAGE_PDU_RECEIVED.equals(intent.getAction())) {
				Bundle bundle = intent.getExtras();
				if(bundle!=null){
					Object receivedObj = bundle.get(Constants.MESSAGE_RECEIVED_DATA);
					if(receivedObj instanceof GenericMessagePDU){
						GenericMessagePDU pdu = (GenericMessagePDU) receivedObj;
						Toast.makeText(getApplicationContext(), pdu.GetDescription(), Toast.LENGTH_SHORT).show();
						nextScreen();
						//						unregisterUser();
					}
				}
			}
		}
	};
	
	private BroadcastReceiver connectionStatusReceiver = new BroadcastReceiver(){
		@Override
		public void onReceive(Context context, Intent intent) {
			if (Constants.ACTION_CONNECTION_STATUS.equals(intent.getAction())) {
				Bundle bundle = intent.getExtras();
				if(bundle!=null){
					Object receivedObj = bundle.get(Constants.CONNECTION_STATUS);
					if(Constants.CONNECTION_STATUS_OK.equals(receivedObj)){
						Toast.makeText(getApplicationContext(), "Connected", Toast.LENGTH_SHORT).show();
					} else if (Constants.CONNECTION_STATUS_FAIL.equals(receivedObj)){
						Toast.makeText(getApplicationContext(), "ERROR connecting. \n Try again later", Toast.LENGTH_SHORT).show();
					}
				}
			}
		}
	};
}
